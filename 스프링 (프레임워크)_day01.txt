스프링(프레임워크)

-의존주입 (Dependency Inject :DI)지원
-AOP(Aspect-Oriented Programming)지원
MVC 웹 프레임 워크 제공
-JDBC, JPA 연동, 선언적 트랜잭션 처리 등 DB연동 지원


2.메이븐 설치
3. 스프링 프로젝트 생성 
mvn archetype:generate

4.스프링 객체 컨테이너

AnnotationConfigApplicationContext 클래스는 자바 설정에서 정보를 읽어와 빈 객체를 생성하고 초기화를 수행 관리한다.

AnnotationConfigApplicationContext : 자바 애노테이션을 이용한 클래스로부터 객체 설정 정보를 가져온다.
GenericXmlApplicationContext : XML로 부터 객체 정보를 가져온다만을 생성하며, 이 떄 빈 객체는 "싱글톤(singleton) 범위를 갖는다
- @Bean 애노테이션에 대해 한 개의 빈 객체를 생성

5.싱글톤 객체 
-별도 설정을 하지 않을 경우 스프링은 한 개의 빈 객체-------------------------
         MemberDao dao = new MemberDao();
     // 의존 객체를 생성자에 주입한다.
     MemberRegisterService svc = new MemberRegisterService(dao);
     
6.의존 주입 (Dependency Injection)-DI
-한 클래스가 다른 클래스의 메서드를 실행 할 때 이를 의존한다고 표현
의존은 변경에 의해 영향을 받는 관계를 의미한다. 예를 들어 MemberDao의 insert() 메서드의 이름을 insertMember()로 변경하면 이 메서드를 사용하는 MemberRegisterService 클래스의 소스 코드도 함께 변경

6-1.DI를 통한 의존 처리'
-DI(Dependency Injection, 의존 주입)는 의존하는 객체를 직접 생성하는 대신 의존 객체를 전달 받는 방식을 사용 
    private MemberDao memberDao;
	
	public MemberRegisterService(MemberDao memberDao) {
		this.memberDao  = memberDao;
	}
----------------------------------------.
GenericGroovyApplicationContext : 그루비 코드를 이용해 설정 정보를 가져온다.
**어떤 구현 클래스를 사용하단, 각 구현 클래스는 설정 정보로부터 빈(Bean)이라고 불리는 객체를 생성하고 그 객체를 내부에 보관한다. 그리고 getBean() 메서드를 실행하면 해당하는 빈 객체를 제공

       // 1) 설정 정보를 이용해서 빈 객체를 생성한다.
AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();

     // 2) 빈 객체를 제공한다.
Greeter g = ctx.getBean("greeter", Greeter.class);

스프링 컨테이너는 내부적으로 빈 객체와 빈 이름을 연결하는 정보를 갖는다. 예를 들어 day01.Greeter 타입의 객체를 greeter라는 이름의 빈으로 설정했다고 하면 컨터이너는 greeter 이름과 Greeter 객체를 연결한 정보를 관리한다.
이름과 실제 객체의 관계뿐만 아니라 실제 객체의 생성, 초기화, 의존 주입 등 스프링 컨테이너는 객체 관리를 위한 다양한 기능을 제공한다.

6-2  DI와 의존 객체 변경의 유연함
의존객체를 직접 생성하는 방식은 필드나 생성자에서 new 연산자를 이용해서 객체를 생성할 수 있다. 
->생성자를 통해서 의존 객체를 직접 주입받도록 구현함으로써 코드 수정의 번거로움을 줄일 수 있다.


7.객체 조립기
-객체를 생성하고 의존 객체를 주입해 주는 클래스는 따로 작성하는 것
public Assembler() {
	memberDao = new MemberDao();
	regSvc = new MemberRegisterService(memberDao);
	pwdSvc = new ChangePasswordService();
	pwdSvc.setMemberDao(memberDao);
}

-조립기는 객체를 생성하고 의존 객체를 주입하는 기능을 제공
-특정 객체가 필요한 곳에 객체를 제공
-예를들면 Assembler 클래스의 getMemberRegisterService() 메서드는 MemberRegisterService 객체가 필요한 곳에서 사용





  





































